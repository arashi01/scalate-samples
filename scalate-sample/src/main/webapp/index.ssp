<%--

    Copyright (C) 2009-2011 the original author or authors.
    See the notice.md file distributed with this work for additional
    information regarding copyright ownership.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

--%>
<img src="images/scalate/project-logo.png"/>

<p>
  Welcome to Scalate: the Scala Template Engine. Try surfing some of the examples below
</p>

<h2>SSP Samples</h2>

The following use JSP style syntax

<ul>
  <li>
    <a href="ssp/simple.ssp">simple</a>
  </li>
  <li>
    <a href="ssp/ifExpression.ssp">using Scala if expression inside an SSP expression</a>
  </li>
  <li>
    <a href="ssp/matchExpression.ssp">using Scala match/case expression inside an SSP expression</a>
  </li>
  <li>
    <a href="ssp/locale.ssp">shows use of locales and auto-formatting of numbers and dates</a>
  </li>
  <li>
    <a href="ssp/customLayout.ssp">a custom layout</a>
  </li>
  <li>
    <a href="ssp/noLayout.ssp">no layout</a>
  </li>
  <li>
    <a href="ssp/exampleIncludes.ssp">includes example</a> shows how to include other templates or fragments
  </li>
  <li>
    <a href="ssp/snippet.ssp">invoke a snippet implemented in scala code</a>
  </li>
  <li>
    <a href="sampleServlet">servlet invoking a SSP with arguments</a>
  </li>
  <li>
    <a href="ssp/defaultAttribute.ssp">an SSP with an attribute using a default value</a>
  </li>
  <li>
    <a href="ssp/renderTemplate.ssp">render a partial template</a>
  </li>
  <li>
    <a href="ssp/renderObject.ssp">render an object using its default template</a>
  </li>
  <li>
    <a href="ssp/renderCollection.ssp">render a collection of objects using their default template</a>
  </li>
  <li>
    <a href="ssp/renderCaseClass.ssp">render an object using the default Product template</a> which renders any case class
  </li>
  <li>
    <a href="ssp/sampleTag.ssp">custom tag</a> process a block of text using a simple scala function
  </li>
  <li>
    <a href="ssp/sampleTag2.ssp">custom tag 2</a> as above using an explicit RenderContext param
  </li>
  <li>
    <a href="ssp/sampleTag3.ssp">custom tag 3</a> the scala function body uses a RenderContext variable
  </li>
  <li>
    <a href="ssp/withTrait.ssp">using a helpers in a trait</a>
  </li>
</ul>

These use the <a href="http://scalate.fusesource.org/documentation/ssp-reference.html#velocity_style_directives">Velocity style</a> directives

<ul>
  <li>
    <a href="ssp/velocity/singleLoop.ssp">Single for loop</a>
  </li>
  <li>
    <a href="ssp/velocity/doubleLoop.ssp">double for loop</a>
  </li>
  <li>
    <a href="ssp/velocity/if.ssp">if / else branch</a>
  </li>
</ul>

<h2>Scaml Samples</h2>

The following use the Scala version of <a href="http://haml-lang.com/">Haml</a> which is very DRY and concise 

<ul>
  <li>
    <a href="scaml/standalone.scaml">simple</a>
  </li>
  <li>
    <a href="scaml/locale.scaml">shows use of locales and auto-formatting of numbers and dates</a>
  </li>
  <li>
    <a href="scaml/snippet.scaml">invoke a snippet implemented in scala code</a>
  </li>
  <li>
    <a href="scaml/defaultAttribute.scaml">an Scaml with an attribute using a default value</a>
  </li>
  <li>
    <a href="scaml/renderObject.scaml">render an object using its default template</a>
  </li>
  <li>
    <a href="scaml/renderCollection.scaml">render a collection of objects using their default template</a>
  </li>
  <li>
    <a href="scaml/renderCaseClass.scaml">render an object using the default Product template</a> which renders any case class
  </li>
  <li>
    <a href="scaml/sampleTag.scaml">custom tag</a> process a block of text using a simple scala function
  </li>
  <li>
    <a href="scaml/sampleTag2.scaml">custom tag 2</a> as above using an explicit RenderContext param
  </li>
  <li>
    <a href="scaml/sampleTag3.scaml">custom tag 3</a> the scala function body uses a RenderContext variable
  </li>
  <li>
    <a href="scaml/withTrait.scaml">using a helpers in a trait</a>
  </li>
</ul>

<h2>Jade Samples</h2>

<ul>
  <li>
    <a href="jade/measurements.jade">measurements</a>
  </li>
  <li>
    <a href="jade/coffee.jade">CoffeeScript alert</a>
  </li>
  <li>
    <a href="jade/renderOptionCollection.jade">renderOptionCollection</a>
  </li>
</ul>

<h2>JAXRS Samples</h2>

<ul>
  <li>
    <a href="foo">FooResource</a>
  </li>
  <li>
    <a href="foo/abc">Item ABC</a> a child resource
  </li>
  <li>
    <a href="foo/def">Item DEF</a> a child resource
  </li>
  <li>
    <a href="mustache">MustacheResource</a> using a Mustache template
  </li>
</ul>

<h2>Error Messages</h2>

<ul>
  <li>
    <a href="scaml/errors/templateCompileError.scaml">Template Syntax Error</a>
  </li>
  <li>
    <a href="scaml/errors/scalaCompileError.scaml">Scala Compile Error</a>
  </li>
  <li>
    <a href="bad">Error in JAXRS view template</a>
  </li>
  <li>
    <a href="scaml/errors/runtimeException.scaml">An Exception thrown at Runtime while rendering a template</a>
  </li>
  <li>
    <a href="mustache/errors/templateCompileError.mustache">Typo in a Mustache template</a>
  </li>
  <li>
    <a href="ssp/errors/missingAttribute.ssp">Missing attribute in SSP</a> or the <a href="scaml/errors/missingAttribute.scaml">scaml version</a> 
  </li>
  <li>
    <a href="ssp/errors/missingInclude.ssp">Missing include SSP template</a> or the <a href="scaml/errors/missingInclude.scaml">scaml version</a>
  </li>
  <li>
    <a href="ssp/errors/missingView.ssp">Missing view SSP template</a>
  </li>
</ul>

